################################################################################
#
# Correlated evolution module
# 
# Adapted from Sebastian HÃ¶hna
#
################################################################################

#######################
# Reading in the Data #
#######################

CHARACTER_A = "Hab"
CHARACTER_B = "FP"
NUM_STATES_A = 2
NUM_STATES_B = 2

# Import the morphological character matrix #
cr1 <- readDiscreteCharacterData(cr_fn1)
cr2 <- readDiscreteCharacterData(cr_fn2)

crs = combineCharacter( cr1, cr2 )

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()

#########################
# Set up the rate model #
#########################

# we assume every rate i <-> j to be independent and exponentially distributed
rate_pr := phylogeny.treeLength() / 10
for (i in 1:4) {
    for (j in 1:4) {
        rates[i][j] <- 0.0
    }
}

mix_prob <- 0.5
rate_gain_A_when_B0 ~ dnExponential( rate_pr )
rate_gain_A_when_B1 ~ dnReversibleJumpMixture(rate_gain_A_when_B0, dnExponential( rate_pr ), mix_prob)
rate_loss_A_when_B0 ~ dnExponential( rate_pr )
rate_loss_A_when_B1 ~ dnReversibleJumpMixture(rate_loss_A_when_B0, dnExponential( rate_pr ), mix_prob)
rate_gain_B_when_A0 ~ dnExponential( rate_pr )
rate_gain_B_when_A1 ~ dnReversibleJumpMixture(rate_gain_B_when_A0, dnExponential( rate_pr ), mix_prob)
rate_loss_B_when_A0 ~ dnExponential( rate_pr )
rate_loss_B_when_A1 ~ dnReversibleJumpMixture(rate_loss_B_when_A0, dnExponential( rate_pr ), mix_prob)

prob_gain_A_indep := ifelse( rate_gain_A_when_B0 == rate_gain_A_when_B1, 1.0, 0.0 )
prob_loss_A_indep := ifelse( rate_loss_A_when_B0 == rate_loss_A_when_B1, 1.0, 0.0 )
prob_gain_B_indep := ifelse( rate_gain_B_when_A0 == rate_gain_B_when_A1, 1.0, 0.0 )
prob_loss_B_indep := ifelse( rate_loss_B_when_A0 == rate_loss_B_when_A1, 1.0, 0.0 )

moves.append( mvScale( rate_gain_A_when_B0, weight=2 ) )
moves.append( mvScale( rate_gain_A_when_B1, weight=2 ) )
moves.append( mvScale( rate_loss_A_when_B0, weight=2 ) )
moves.append( mvScale( rate_loss_A_when_B1, weight=2 ) )
moves.append( mvScale( rate_gain_B_when_A0, weight=2 ) )
moves.append( mvScale( rate_gain_B_when_A1, weight=2 ) )
moves.append( mvScale( rate_loss_B_when_A0, weight=2 ) )
moves.append( mvScale( rate_loss_B_when_A1, weight=2 ) )

moves.append( mvRJSwitch(rate_gain_A_when_B1, weight=2.0) )
moves.append( mvRJSwitch(rate_loss_A_when_B1, weight=2.0) )
moves.append( mvRJSwitch(rate_gain_B_when_A1, weight=2.0) )
moves.append( mvRJSwitch(rate_loss_B_when_A1, weight=2.0) )


rates[1][2] := rate_gain_B_when_A0 # 00->01
rates[1][3] := rate_gain_A_when_B0 # 00->10
rates[2][1] := rate_loss_B_when_A0 # 01->00
rates[2][4] := rate_gain_A_when_B1 # 01->11
rates[3][1] := rate_loss_A_when_B0 # 10->00
rates[3][4] := rate_gain_B_when_A1 # 10->11
rates[4][2] := rate_loss_A_when_B1 # 11->01
rates[4][3] := rate_loss_B_when_A1 # 11->10

Q_crs := fnFreeK(rates, rescaled=FALSE)

#####################################
# Set up the root state frequencies #
#####################################

rf_prior <- rep(1,NUM_STATES_A*NUM_STATES_B)
rf ~ dnDirichlet( rf_prior )
moves.append( mvBetaSimplex( rf, weight=2 ) )
moves.append( mvDirichletSimplex( rf, weight=2 ) )


###################
# Set up the CTMC #
###################

# Combine all of our elements into a CTMC.
phyCrs ~ dnPhyloCTMC(tree=phylogeny, Q=Q_crs, rootFrequencies=rf, type="NaturalNumbers")
phyCrs.clamp( crs )
